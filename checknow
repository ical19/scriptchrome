    const FB = {
        apiKey: "AIzaSyCIFQPklgevLVnqsjeG3K5s6JuwZF76r8s",
        authDomain: "tunas-tyt.firebaseapp.com",
        databaseURL: "https://tunas-tyt-default-rtdb.asia-southeast1.firebasedatabase.app",
        projectId: "tunas-tyt",
        storageBucket: "tunas-tyt.firebasestorage.app",
        messagingSenderId: "1066204149365",
        appId: "1:1066204149365:web:7d7ec14c437dec32236a3c",
        measurementId: "G-MNCJ1V37ZP",
    };

    const PATH = {
        pending: "pending",
        valid: "valid",
        invalid: "invalid",
        test: "tampermonkey_test"
    };

    const SEL = {
        phones: [
            "input[aria-label='Mobile Phone']",
            "input[data-id='mobilephone.fieldControl-phone-text-input']"
        ],
        plate: "input[aria-label='Plate No.']",
        vinText: "[data-id$='selected_tag_text'][data-id*='vehicleidentificationid']",
        serviceAdvisor: 'div[data-id="xts_serviceadvisorid.fieldControl-LookupResultsDropdown_xts_serviceadvisorid_selected_tag_text"]',
        typeKendaraan: 'div[data-id="xts_productsegment1id.fieldControl-LookupResultsDropdown_xts_productsegment1id_selected_tag_text"]',

        // contactPerson → bisa lookup (div) atau text input (First Name)
        contactPerson: [
            'div[data-id="xts_contactpersonid.fieldControl-LookupResultsDropdown_xts_contactpersonid_selected_tag_text"]',
            'input[data-id="firstname.fieldControl-text-box-text"]',
            'input[aria-label="First Name"]'
        ]
    };


    // Opsi dropdown untuk status invalid
    const INVALID_OPTIONS = [
        "Privasi",
        "Pelanggan memberi nomor salah",
        "Rental (Tidak ada WA user)",
        "Lainnya"
    ];

    const TOAST_AUTOHIDE_MS = 5000;
    const RESCAN_MS = 2000;
    const LOGP = "[WA-CHECK]";

    /**************** Style Minimalis ****************/
    const addStyle = (css) => {
        try { GM_addStyle(css); } catch (_) {
            const s = document.createElement("style");
            s.textContent = css;
            document.head.appendChild(s);
        }
    };

    addStyle(`
    #wa-toast-container {
      position: fixed;
      top: 12px;
      right: 12px;
      z-index: 10000;
      display: flex;
      flex-direction: column;
      gap: 8px;
      pointer-events: none;
    }
    .wa-toast {
      min-width: 300px;
      max-width: 400px;
      pointer-events: auto;
      animation: waSlideIn 0.4s ease-out forwards;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      border-radius: 6px;
      overflow: hidden;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: white;
      border-left: 5px solid #6c757d;
    }
    .wa-toast.valid {
      border-left-color: #28a745;
    }
    .wa-toast.invalid {
      border-left-color: #dc3545;
    }
    .wa-toast-header {
      padding: 10px 15px;
      font-weight: bold;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: #f8f9fa;
    }
    .wa-toast-body {
      padding: 12px 15px;
    }
    .wa-toast-close {
      background: none;
      border: none;
      font-size: 18px;
      cursor: pointer;
      opacity: 0.7;
    }
    .wa-toast-close:hover {
      opacity: 1;
    }
    @keyframes waSlideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
    .wa-status-indicator {
      position: absolute;
      left: 8px;
      top: 50%;
      transform: translateY(-50%);
      width: 20px;
      height: 20px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      color: white;
      z-index: 5;
    }
    #firebase-status {
      position: fixed;
      bottom: 10px;
      right: 10px;
      padding: 5px 10px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 10000;
      background: #f8f9fa;
      border: 1px solid #dee2e6;
    }
    #firebase-status.connected {
      background: #d4edda;
      border-color: #c3e6cb;
      color: #155724;
    }
    #firebase-status.disconnected {
      background: #f8d7da;
      border-color: #f5c6cb;
      color: #721c24;
    }
    #firebase-status.connecting {
      background: #fff3cd;
      border-color: #ffeeba;
      color: #856404;
    }
    #firebase-trigger-btn {
      position: fixed;
      bottom: 40px;
      right: 10px;
      padding: 5px 10px;
      border-radius: 4px;
      font-size: 12px;
      z-index: 10000;
      background: #007bff;
      color: white;
      border: none;
      cursor: pointer;
    }
    #firebase-trigger-btn:hover {
      background: #0069d9;
    }
    #invalid-reason-modal {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 20px rgba(0,0,0,0.2);
      z-index: 10001;
      min-width: 350px;
    }
    #invalid-reason-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0,0,0,0.5);
      z-index: 10000;
    }
    #invalid-reason-select {
      width: 100%;
      padding: 10px;
      margin: 10px 0;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 16px;
    }
    #invalid-reason-submit {
      background: #007bff;
      color: white;
      border: none;
      padding: 10px 15px;
      border-radius: 4px;
      cursor: pointer;
      width: 100%;
    }
    #invalid-reason-submit:hover {
      background: #0069d9;
    }
    #invalid-reason-submit:disabled {
      background: #6c757d;
      cursor: not-allowed;
    }
    .invalid-reason-error {
      color: #dc3545;
      font-size: 12px;
      margin-top: 5px;
    }
  `);

    /**************** Firebase Init ****************/
    let db = null;
    let firebaseInitialized = false;
    let firebaseInitAttempts = 0;
    const MAX_INIT_ATTEMPTS = Infinity;
    let connectionListener = null;

    function initFirebase() {
        try {
            if (firebaseInitialized) return true;

            firebaseInitAttempts++;

            if (firebaseInitAttempts > 20) {
                console.warn(LOGP, "Banyak percobaan inisialisasi, jeda sebentar...");
                setTimeout(initFirebase, 10000);
                return false;
            }

            if (typeof firebase === "undefined") {
                console.log(LOGP, "Firebase belum tersedia, mencoba lagi dalam 2 detik...");
                setTimeout(initFirebase, 2000);
                return false;
            }

            if (!firebase.apps.length) {
                console.log(LOGP, "Menginisialisasi Firebase...");
                firebase.initializeApp(FB);
            }

            db = firebase.database();
            updateFirebaseStatus(false, "Sedang menghubungkan...");

            testFirebaseConnection();

            return true;
        } catch (e) {
            console.error(LOGP, "Firebase init error:", e);
            updateFirebaseStatus(false, "Error: " + e.message);
            setTimeout(initFirebase, 3000);
            return false;
        }
    }

    function testFirebaseConnection() {
        if (!db) {
            console.error(LOGP, "DB belum siap untuk test connection");
            return;
        }

        console.log(LOGP, "Testing Firebase connection dengan .info/connected listener...");

        if (connectionListener) {
            db.ref(".info/connected").off("value", connectionListener);
        }

        connectionListener = db.ref(".info/connected").on("value", (snap) => {
            if (snap.val() === true) {
                console.log(LOGP, "Firebase connected (via .info/connected)");
                firebaseInitialized = true;
                updateFirebaseStatus(true, "Terhubung");
                hideFirebaseTriggerButton();

                testFirebaseWrite();
            } else {
                console.log(LOGP, "Firebase disconnected");
                firebaseInitialized = false;
                updateFirebaseStatus(false, "Terputus");
            }
        }, (error) => {
            console.error(LOGP, "Error in connection listener:", error);
            firebaseInitialized = false;
            updateFirebaseStatus(false, "Error: " + error.message);
        });

        keepFirebaseSynced();
    }

    function testFirebaseWrite() {
        if (!db || !firebaseInitialized) return;

        const ts = new Date().toISOString();
        const path = `${PATH.test}/${location.hostname.replace(/\./g, '_')}/${Date.now()}`;
        const payload = {
            sourceUrl: location.href,
            hostname: location.hostname,
            timeISO: ts,
            message: 'Connection test dari D365 WA Checker',
            userAgent: navigator.userAgent,
            type: 'connection_test'
        };

        db.ref(path).set(payload)
            .then(() => {
            console.log(LOGP, "Firebase test write success");
        })
            .catch(err => {
            console.error(LOGP, "Firebase test write error:", err);
        });
    }

    function keepFirebaseSynced() {
        if (!db) return;

        try {
            db.ref(PATH.pending).keepSynced(true);
            db.ref(PATH.valid).keepSynced(true);
            db.ref(PATH.invalid).keepSynced(true);
            console.log(LOGP, "Firebase keepSynced enabled untuk path utama");
        } catch (e) {
            console.warn(LOGP, "Tidak dapat mengaktifkan keepSynced:", e);
        }
    }

    function updateFirebaseStatus(connected, message) {
        let statusEl = document.getElementById("firebase-status");
        if (!statusEl) {
            statusEl = document.createElement("div");
            statusEl.id = "firebase-status";
            document.body.appendChild(statusEl);
        }

        statusEl.textContent = "-> " + message;
        statusEl.className = connected ? "connected" : (message.includes("menghubungkan") ? "connecting" : "disconnected");
    }

    function showFirebaseTriggerButton() {
        let btn = document.getElementById("firebase-trigger-btn");
        if (!btn) {
            btn = document.createElement("button");
            btn.id = "firebase-trigger-btn";
            btn.textContent = "Trigger Firebase Connection";
            btn.addEventListener("click", triggerFirebaseConnection);
            document.body.appendChild(btn);
        }
        btn.style.display = "block";
    }

    function hideFirebaseTriggerButton() {
        const btn = document.getElementById("firebase-trigger-btn");
        if (btn) {
            btn.style.display = "none";
        }
    }

    function triggerFirebaseConnection() {
        console.log(LOGP, "Manual Firebase trigger initiated");
        firebaseInitAttempts = 0;
        firebaseInitialized = false;
        updateFirebaseStatus(false, "Manual trigger...");

        if (connectionListener && db) {
            db.ref(".info/connected").off("value", connectionListener);
            connectionListener = null;
        }

        initFirebase();
    }

    /**************** Invalid Reason Modal ****************/
    function showInvalidReasonModal(phone, ctx, val) {
        // Create overlay
        const overlay = document.createElement("div");
        overlay.id = "invalid-reason-overlay";
        document.body.appendChild(overlay);

        // Create modal
        const modal = document.createElement("div");
        modal.id = "invalid-reason-modal";

        const title = document.createElement("h3");
        title.textContent = "Alasan Invalid WhatsApp";
        title.style.marginTop = "0";

        const instruction = document.createElement("p");
        instruction.textContent = `Pilih alasan untuk nomor ${phone}:`;
        instruction.style.marginBottom = "10px";

        const select = document.createElement("select");
        select.id = "invalid-reason-select";

        // Add default option
        const defaultOption = document.createElement("option");
        defaultOption.value = "";
        defaultOption.textContent = "-- Pilih alasan --";
        defaultOption.disabled = true;
        defaultOption.selected = true;
        select.appendChild(defaultOption);

        // Add options from INVALID_OPTIONS
        INVALID_OPTIONS.forEach(option => {
            const optElement = document.createElement("option");
            optElement.value = option;
            optElement.textContent = option;
            select.appendChild(optElement);
        });

        const error = document.createElement("div");
        error.className = "invalid-reason-error";
        error.style.display = "none";
        error.textContent = "Silakan pilih alasan";

        const submitBtn = document.createElement("button");
        submitBtn.id = "invalid-reason-submit";
        submitBtn.textContent = "Simpan";
        submitBtn.disabled = true;

        // Event listeners
        select.addEventListener("change", function() {
            const isValid = this.value !== "";
            submitBtn.disabled = !isValid;
            error.style.display = isValid ? "none" : "block";
        });

        submitBtn.addEventListener("click", function() {
            if (select.value !== "") {
                // Send to sheet dengan alasan yang dipilih
                sendToSheet({
                    policeRegNo: val.policeNo || "",
                    equipmentNo: val.chassisNo || "",
                    contactPersonPhone: phone || "",
                    serviceAdvisor: ctx.serviceAdvisor || "",
                    typeKendaraan: ctx.typeKendaraan || "",
                    contactPerson: ctx.contactPerson || "",
                    statusWA: "invalid",
                    invalidReason: select.value
                });

                // Enable buttons
                document.querySelector('[data-id="quickCreateSaveAndCloseBtn"]').disabled = false;
                document.querySelectorAll('.fui-SplitButton button').forEach(btn => btn.disabled = false);

                // Remove modal and overlay
                document.body.removeChild(modal);
                document.body.removeChild(overlay);

                // Show success message
                showToast({
                    title: "Data Invalid Tersimpan",
                    message: `Data telah dikirim dengan alasan: ${select.value}`,
                    type: "info"
                });
            }
        });

        // Append elements to modal
        modal.appendChild(title);
        modal.appendChild(instruction);
        modal.appendChild(select);
        modal.appendChild(error);
        modal.appendChild(submitBtn);

        document.body.appendChild(modal);

        // Focus on select
        setTimeout(() => select.focus(), 100);
    }

    function renderInvalidDropdown(phone, ctx, val) {
        const saveBtn = document.querySelector('[data-id="quickCreateSaveAndCloseBtn"]');
        if (!saveBtn) {
            console.warn(LOGP, "Save and Close button tidak ditemukan");
            return;
        }

        // Jika dropdown sudah ada, hapus dulu
        const oldDropdown = document.getElementById("invalid-reason-dropdown");
        if (oldDropdown) oldDropdown.remove();

        // Buat container untuk dropdown
        const dropdownContainer = document.createElement("div");
        dropdownContainer.id = "invalid-reason-container";
        dropdownContainer.style.display = "inline-flex";
        dropdownContainer.style.alignItems = "center";
        dropdownContainer.style.marginRight = "8px";
        dropdownContainer.style.position = "relative";

        // Buat dropdown
        const select = document.createElement("select");
        select.id = "invalid-reason-dropdown";
        select.className = "elegant-dropdown"; // Untuk styling CSS tambahan

        // Style untuk dropdown
        select.style.padding = "6px 28px 6px 10px"; // Ruang untuk ikon panah
        select.style.border = "1px solid #d1d5db";
        select.style.borderRadius = "4px";
        select.style.fontSize = "13px";
        select.style.lineHeight = "1.4";
        select.style.backgroundColor = "#ffffff";
        select.style.color = "#374151";
        select.style.cursor = "pointer";
        select.style.appearance = "none"; // Hilangkan style default browser
        select.style.transition = "all 0.2s ease";
        select.style.minWidth = "180px";
        select.style.maxWidth = "220px";
        select.style.boxShadow = "0 1px 2px rgba(0, 0, 0, 0.05)";

        // Hover effect
        select.addEventListener("mouseenter", () => {
            select.style.borderColor = "#9ca3af";
            select.style.boxShadow = "0 1px 3px rgba(0, 0, 0, 0.1)";
        });

        select.addEventListener("mouseleave", () => {
            select.style.borderColor = "#d1d5db";
            select.style.boxShadow = "0 1px 2px rgba(0, 0, 0, 0.05)";
        });

        // Focus effect
        select.addEventListener("focus", () => {
            select.style.borderColor = "#3b82f6";
            select.style.boxShadow = "0 0 0 3px rgba(59, 130, 246, 0.15)";
            select.style.outline = "none";
        });

        select.addEventListener("blur", () => {
            select.style.borderColor = "#d1d5db";
            select.style.boxShadow = "0 1px 2px rgba(0, 0, 0, 0.05)";
        });

        // Default option
        const defaultOption = document.createElement("option");
        defaultOption.value = "";
        defaultOption.textContent = "Pilih alasan invalid";
        defaultOption.disabled = true;
        defaultOption.selected = true;
        select.appendChild(defaultOption);

        // Tambah opsi
        INVALID_OPTIONS.forEach(opt => {
            const o = document.createElement("option");
            o.value = opt;
            o.textContent = opt;
            select.appendChild(o);
        });

        // Buat custom arrow untuk dropdown
        const customArrow = document.createElement("div");
        customArrow.innerHTML = "▼";
        customArrow.style.position = "absolute";
        customArrow.style.right = "8px";
        customArrow.style.top = "50%";
        customArrow.style.transform = "translateY(-50%)";
        customArrow.style.pointerEvents = "none";
        customArrow.style.fontSize = "10px";
        customArrow.style.color = "#6b7280";

        dropdownContainer.appendChild(select);
        dropdownContainer.appendChild(customArrow);

        // Sisipkan sebelum Save and Close
        saveBtn.parentNode.insertBefore(dropdownContainer, saveBtn);

        // Saat memilih alasan
        select.addEventListener("change", () => {
            if (select.value !== "") {
                // Kirim ke Sheet
                sendToSheet({
                    policeRegNo: val.policeNo || "",
                    equipmentNo: val.chassisNo || "",
                    contactPersonPhone: phone || "",
                    serviceAdvisor: ctx.serviceAdvisor || "",
                    typeKendaraan: ctx.typeKendaraan || "",
                    contactPerson: ctx.contactPerson || "",
                    statusWA: "invalid",
                    invalidReason: select.value
                });

                // Enable tombol Save and Close
                document.querySelector('[data-id="quickCreateSaveAndCloseBtn"]').disabled = false;
                document.querySelectorAll('.fui-SplitButton button').forEach(btn => btn.disabled = false);

                // Optional: hapus dropdown setelah submit
                // select.remove();

                // Notifikasi
                showToast({
                    title: "Data Invalid Tersimpan",
                    message: `Data telah dikirim dengan alasan: ${select.value}`,
                    type: "info"
                });
            }
        });
    }

    // CSS tambahan untuk styling lebih baik (tambahkan ke stylesheet Anda)
    /*
.elegant-dropdown {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

.elegant-dropdown option {
    padding: 8px 12px;
    font-size: 13px;
}
*/

    /**************** Utils ****************/
    function sendToSheet(data) {
        const url = "https://script.google.com/macros/s/AKfycbyE3MchIf8jjq1lRcw1GDjxN3m5Sl3qdwnEQFhAJ7ock_4smQ9F54V-SP2yIoc2_FzWpw/exec";

        GM_xmlhttpRequest({
            method: "POST",
            url: url,
            headers: {
                "Content-Type": "application/json"
            },
            data: JSON.stringify(data),
            onload: function (response) {
                console.log("[Sheet] Response:", response.responseText);
            },
            onerror: function (err) {
                console.error("[Sheet] Error:", err);
            }
        });
    }

    function formatPhoneForInput(phone) {
        if (!phone) return "";

        let cleaned = phone.replace(/\D/g, "");
        if (!cleaned) return phone;

        if (cleaned.startsWith("62")) {
            cleaned = "0" + cleaned.substring(2);
        }
        else if (cleaned.startsWith("+62")) {
            cleaned = "0" + cleaned.substring(3);
        }
        else if (cleaned.startsWith("8")) {
            cleaned = "0" + cleaned;
        }

        if (cleaned.length > 13) {
            cleaned = cleaned.substring(0, 13);
        }

        return cleaned;
    }

    function formatPhoneForRTDB(phone) {
        if (!phone) return null;
        let cleaned = phone.replace(/\D/g, "");

        if (cleaned.startsWith("0")) {
            cleaned = "62" + cleaned.substring(1);
        }
        else if (cleaned.startsWith("+62")) {
            cleaned = cleaned.substring(1);
        }
        else if (cleaned.startsWith("8")) {
            cleaned = "62" + cleaned;
        }

        if (cleaned.length < 9) return null;
        return cleaned;
    }

    function upperTrim(val) {
        if (!val) return "";
        return String(val).trim().toUpperCase();
    }

    let documentCache = null;
    function getDocumentCache() {
        if (!documentCache) {
            documentCache = [document];
            try {
                document.querySelectorAll("iframe").forEach(iframe => {
                    if (iframe.contentDocument) documentCache.push(iframe.contentDocument);
                });
            } catch (e) {}
        }
        return documentCache;
    }

    function showToast({ title, message, type = "info" }) {
        let container = document.getElementById("wa-toast-container");
        if (!container) {
            container = document.createElement("div");
            container.id = "wa-toast-container";
            document.body.appendChild(container);
        }

        const toast = document.createElement("div");
        toast.className = `wa-toast ${type}`;

        const header = document.createElement("div");
        header.className = "wa-toast-header";

        const titleEl = document.createElement("div");
        titleEl.textContent = title;

        const closeBtn = document.createElement("button");
        closeBtn.className = "wa-toast-close";
        closeBtn.innerHTML = "&times;";
        closeBtn.addEventListener("click", () => {
            toast.style.animation = "waSlideOut 0.3s ease-out forwards";
            setTimeout(() => toast.remove(), 300);
        });

        header.appendChild(titleEl);
        header.appendChild(closeBtn);

        const body = document.createElement("div");
        body.className = "wa-toast-body";
        body.textContent = message;

        toast.appendChild(header);
        toast.appendChild(body);
        container.appendChild(toast);

        setTimeout(() => {
            if (toast.parentNode) {
                toast.style.animation = "waSlideOut 0.3s ease-out forwards";
                setTimeout(() => toast.remove(), 300);
            }
        }, TOAST_AUTOHIDE_MS);

        return toast;
    }

    function ensureIconBeforeInput(input, status) {
        const oldIndicator = input.parentNode.querySelector('.wa-status-indicator');
        if (oldIndicator) oldIndicator.remove();

        const indicator = document.createElement("span");
        indicator.className = "wa-status-indicator";

        switch(status) {
            case 'pending':
                indicator.textContent = '⏳';
                indicator.style.backgroundColor = '#6c757d';
                break;
            case 'valid':
                indicator.textContent = '✓';
                indicator.style.backgroundColor = '#28a745';
                break;
            case 'invalid':
                indicator.textContent = '!';
                indicator.style.backgroundColor = '#dc3545';
                break;
            default:
                indicator.textContent = '?';
                indicator.style.backgroundColor = '#ffc107';
        }

        input.parentNode.style.position = 'relative';
        input.style.paddingLeft = '30px';
        input.parentNode.insertBefore(indicator, input);

        return indicator;
    }

    /**************** Field Finders ****************/
    function readFields() {
        const phones = [];
        let plateInput = null;
        let vinElement = null;
        let serviceAdvisorEl = null;
        let typeKendaraanEl = null;
        let contactPersonVal = "";

        const docs = getDocumentCache();
        for (const d of docs) {
            try {
                for (const sel of SEL.phones) {
                    const els = d.querySelectorAll(sel);
                    els.forEach(el => {
                        phones.push({ el, value: el.value });
                    });
                }

                if (!plateInput) plateInput = d.querySelector(SEL.plate);
                if (!vinElement) vinElement = d.querySelector(SEL.vinText);
                if (!serviceAdvisorEl) serviceAdvisorEl = d.querySelector(SEL.serviceAdvisor);
                if (!typeKendaraanEl) typeKendaraanEl = d.querySelector(SEL.typeKendaraan);

                // ambil contact person (cek semua selector)
                if (!contactPersonVal) {
                    for (const sel of SEL.contactPerson) {
                        const el = d.querySelector(sel);
                        if (el) {
                            contactPersonVal = el.value || el.innerText || "";
                            contactPersonVal = contactPersonVal.trim();
                            if (contactPersonVal) break;
                        }
                    }
                }

            } catch (e) {}
        }

        return {
            phones,
            plate: plateInput ? { el: plateInput, value: plateInput.value } : { el: null, value: null },
            vin: vinElement ? { el: vinElement, value: vinElement.textContent || vinElement.innerText } : { el: null, value: null },
            serviceAdvisor: serviceAdvisorEl ? serviceAdvisorEl.innerText.trim() : "",
            typeKendaraan: typeKendaraanEl ? typeKendaraanEl.innerText.trim() : "",
            contactPerson: contactPersonVal
        };
    }

    /**************** RTDB Functions ****************/
    let activePhone = null;
    let detachFns = [];
    let handledPhones = new Map();

    function detachAll() {
        try {
            detachFns.forEach(fn => {
                try { fn(); } catch (e) { console.warn(LOGP, "detach fn error:", e); }
            });
        } catch (e) {
            console.warn(LOGP, "detachAll error:", e);
        }
        detachFns = [];
        handledPhones.clear();
    }

    function attachResultListeners(phone, ctx) {
        if (!db || !firebaseInitialized) {
            console.error(LOGP, "DB belum siap, tidak dapat melampirkan listener");
            return;
        }

        detachAll();
        handledPhones.set(phone, false);

        const validQuery = db.ref(PATH.valid).orderByChild("phone").equalTo(phone).limitToFirst(1);
        const invalidQuery = db.ref(PATH.invalid).orderByChild("phone").equalTo(phone).limitToFirst(1);

        const onValid = (snap) => {
            try {
                const val = snap.val();
                console.log(LOGP, "VALID hit:", val);

                // Untuk valid, langsung kirim ke sheet dan enable buttons
                sendToSheet({
                    policeRegNo: val.policeNo || "",
                    equipmentNo: val.chassisNo || "",
                    contactPersonPhone: phone || "",
                    serviceAdvisor: ctx.serviceAdvisor || "",
                    typeKendaraan: ctx.typeKendaraan || "",
                    contactPerson: ctx.contactPerson || "",
                    statusWA: "valid",
                });

                if (handledPhones.get(phone)) return;
                handledPhones.set(phone, true);

                renderStatus("valid", phone, ctx);
                document.querySelector('[data-id="quickCreateSaveAndCloseBtn"]').disabled = false;
                document.querySelectorAll('.fui-SplitButton button').forEach(btn => btn.disabled = false);

                detachAll();
            } catch (e) {
                console.error(LOGP, "onValid error:", e);
            }
        };

        const onInvalid = (snap) => {
            try {
                const val = snap.val();
                console.log(LOGP, "INVALID hit:", val);

                if (handledPhones.get(phone)) return;
                handledPhones.set(phone, true);

                renderStatus("invalid", phone, ctx);

                // Disable buttons sampai user memilih alasan
                document.querySelector('[data-id="quickCreateSaveAndCloseBtn"]').disabled = true;
                document.querySelectorAll('.fui-SplitButton button').forEach(btn => btn.disabled = true);

                // Tampilkan modal untuk memilih alasan invalid
                //showInvalidReasonModal(phone, ctx, val);
                // Tampilkan dropdown di sebelah Save & Close
                renderInvalidDropdown(phone, ctx, val);


                detachAll();
            } catch (e) {
                console.error(LOGP, "onInvalid error:", e);
            }
        };

        validQuery.on("child_added", onValid);
        invalidQuery.on("child_added", onInvalid);

        detachFns.push(() => { try { validQuery.off("child_added", onValid); } catch (e) {} });
        detachFns.push(() => { try { invalidQuery.off("child_added", onInvalid); } catch (e) {} });

        const timeout = setTimeout(() => {
            console.log(LOGP, "Listener timeout for phone:", phone);
            detachAll();
        }, 15000);
        detachFns.push(() => clearTimeout(timeout));
    }

    function renderStatus(status, phone, { phoneEl, vin, plate }) {
        if (phoneEl) {
            ensureIconBeforeInput(phoneEl, status);
        }

        if (status === "valid" || status === "invalid") {
            const title = status === "valid"
            ? "WhatsApp TERVERIFIKASI"
            : "bukan nomor WhatsApp!";

            const message = status === "valid"
            ? `Nomor ${phone} terverifikasi. Silakan lanjutkan proses.`
                : `Nomor ${phone} tidak terhubung WhatsApp. Silakan pilih alasan.`;

            showToast({
                title,
                message,
                type: status
            });
        }
    }

    function pushPending({ phone, vin, plate, serviceAdvisor, typeKendaraan, contactPerson }) {
        if (!db || !firebaseInitialized) {
            console.error(LOGP, "DB belum siap, skip pushPending");
            return;
        }

        const payload = {
            phone,
            policeNo: plate || "",
            chassisNo: vin || "",
            serviceAdvisor: serviceAdvisor || "",
            typeKendaraan: typeKendaraan || "",
            contactPerson: contactPerson || "",
            status: "pending",
            source: "d365",
            ts: Date.now()
        };

        db.ref(PATH.pending).push(payload)
            .then(() => console.log(LOGP, "PUSH /pending:", payload))
            .catch(err => {
            console.error(LOGP, "RTDB push error:", err);
            if (err.code === 'NETWORK_ERROR') {
                firebaseInitialized = false;
                initFirebase();
            }
        });
    }

    /**************** Main Scanner ****************/
    let isScanning = false;
    let lastSignature = "";

    function scanAndProcess() {
        if (isScanning || !firebaseInitialized) {
            if (!firebaseInitialized) {
                console.log(LOGP, "Menunggu koneksi Firebase...");
            }
            return;
        }
        isScanning = true;

        try {
            const { phones, plate, vin, serviceAdvisor, typeKendaraan, contactPerson } = readFields();

            if (!phones.length) {
                isScanning = false;
                return;
            }

            const plateNorm = upperTrim(plate.value);
            const vinNorm = upperTrim(vin.value);

            phones.forEach(({ el, value }) => {
                if (!el || !value) return;

                const phoneRTDBFormatted = formatPhoneForRTDB(value);
                if (!phoneRTDBFormatted) {
                    ensureIconBeforeInput(el, 'unknown');
                    return;
                }

                const signature = `${phoneRTDBFormatted}|${plateNorm}|${vinNorm}`;
                const changed = signature !== lastSignature;

                if (changed) {
                    console.log(LOGP, lastSignature + " ini last signature");
                    console.log(LOGP, signature + " ini signature");
                    lastSignature = signature;
                    console.log(LOGP, "Detected changes:", { phoneRTDBFormatted, plateNorm, vinNorm });

                    ensureIconBeforeInput(el, 'pending');

                    if (activePhone !== phoneRTDBFormatted) {
                        detachAll();
                        activePhone = phoneRTDBFormatted;
                        attachResultListeners(activePhone, {
                            phoneEl: el,
                            vin: vinNorm,
                            plate: plateNorm,
                            serviceAdvisor,
                            typeKendaraan,
                            contactPerson
                        });
                    }

                    pushPending({
                        phone: phoneRTDBFormatted,
                        vin: vinNorm,
                        plate: plateNorm,
                        serviceAdvisor,
                        typeKendaraan,
                        contactPerson
                    });
                }
            });
        } catch (error) {
            console.error(LOGP, "Error in scanAndProcess:", error);
        } finally {
            isScanning = false;
        }
    }

    /**************** Optimized Scanning ****************/
    let scanInterval = null;

    function startScanner() {
        initFirebase();

        const checkFirebaseReady = setInterval(() => {
            if (firebaseInitialized) {
                clearInterval(checkFirebaseReady);
                if (scanInterval) clearInterval(scanInterval);
                scanInterval = setInterval(scanAndProcess, RESCAN_MS);
                console.log(LOGP, "Scanner started. Firebase ready.");
            }
        }, 1000);
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', startScanner);
    } else {
        startScanner();
    }

    console.log(LOGP, "Script ready. Menunggu field muncul...");
